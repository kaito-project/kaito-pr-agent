name: PR-Agent E2E Tests

# =============================================================================
# DEVELOPMENT/TESTING WORKFLOW
# =============================================================================
# This workflow tests YOUR CODE CHANGES by building a Docker image from your
# modified code and running end-to-end tests against it.
# 
# Purpose: Validate that your code changes work correctly before merging
# Trigger: Pull requests to main, or manual triggers
# Code Used: YOUR MODIFIED CODE (builds fresh Docker image from your branch)
# 
# =============================================================================

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  # schedule:
  #   - cron: '0 2 * * *' # Run nightly at 2 AM UTC

# Prevent multiple E2E tests from running simultaneously per PR/branch
concurrency:
  group: e2e-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e_test:
    # Skip E2E test PRs to avoid infinite recursion
    # This checks: PR title doesn't contain [E2E Test], branch name doesn't start with e2e-test-, and PR title doesn't contain e2e-test-
    if: ${{ !contains(github.event.pull_request.title, '[E2E Test]') && !startsWith(github.event.pull_request.head.ref, 'e2e-test-') && !contains(github.event.pull_request.title, 'e2e-test-') }}
    runs-on: [ "self-hosted", "hostname:kaito-e2e-github-runner-2" ]
    permissions:
      contents: read
      pull-requests: write
      issues: write
    name: E2E Test PR-Agent Docker Image
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit
          disable-sudo: false  # Need sudo for Docker operations
          disable-telemetry: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate unique image tag
        id: image_tag
        run: |
          # Create unique tag to avoid conflicts between parallel runs
          UNIQUE_TAG="kaito-project/kaito-pr-agent:test-${{ github.run_id }}-${{ github.run_attempt }}"
          echo "image_tag=${UNIQUE_TAG}" >> $GITHUB_OUTPUT
          echo "Using unique image tag: ${UNIQUE_TAG}"

      - name: Build PR-Agent Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: ${{ steps.image_tag.outputs.image_tag }}
          target: test

      - name: Set up Python for E2E test
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install E2E test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest PyGithub python-dotenv
          # Install PR-Agent dependencies for the test environment
          pip install -r requirements.txt

      - name: Run E2E Test
        env:
          # GitHub configuration
          GITHUB.USER_TOKEN: ${{ secrets.E2E_GITHUB_TOKEN }}
          GITHUB.DEPLOYMENT_TYPE: user
          
          # Model configuration (matching .secrets.toml)
          CONFIG.MODEL: "hosted_vllm/qwen2.5-coder-32b-instruct"
          CONFIG.FALLBACK_MODELS: "hosted_vllm/qwen2.5-coder-32b-instruct"
          CONFIG.CUSTOM_MODEL_MAX_TOKENS: "32768"
          CONFIG.DUPLICATE_PROMPT_EXAMPLES: "true"
          CONFIG.AI_TIMEOUT: "600"
          
          # Ollama/Kaito endpoint configuration
          OLLAMA.API_BASE: ${{ secrets.KAITO_PR_REVIEWER_WORKSPACE_URL }}
          
          # GitHub event handling (matching .secrets.toml settings)
          GITHUB.HANDLE_PR_ACTIONS: "opened,reopened,ready_for_review"
          GITHUB.HANDLE_PUSH_TRIGGER: "true"
          GITHUB.PUSH_TRIGGER_IGNORE_BOT_COMMITS: "true"
          GITHUB.PUSH_TRIGGER_IGNORE_MERGE_COMMITS: "true"
          GITHUB.PUSH_TRIGGER_WAIT_FOR_INITIAL_REVIEW: "true"
          GITHUB.PR_COMMANDS: "/describe,/review,/improve"
          GITHUB.PUSH_COMMANDS: "/describe,/review,/improve"
          
          # PR Description settings (matching .secrets.toml)
          PR_DESCRIPTION.PUBLISH_DESCRIPTION_AS_COMMENT: "true"
          PR_DESCRIPTION.PUBLISH_DESCRIPTION_AS_COMMENT_PERSISTENT: "true"
          PR_DESCRIPTION.ENABLE_PR_TYPE: "false"
          PR_DESCRIPTION.ADD_ORIGINAL_USER_DESCRIPTION: "false"
          PR_DESCRIPTION.GENERATE_AI_TITLE: "true"
          PR_DESCRIPTION.FINAL_UPDATE_MESSAGE: "false"
          
          # PR Reviewer settings (matching .secrets.toml)
          PR_REVIEWER.FINAL_UPDATE_MESSAGE: "false"
          
          # PR Code Suggestions settings
          PR_CODE_SUGGESTIONS.PUBLISH_OUTPUT_NO_SUGGESTIONS: "false"
          
          # Output configuration
          CONFIG.PUBLISH_OUTPUT: "true"
          CONFIG.VERBOSITY_LEVEL: "1"
          
          # E2E Test specific
          E2E_DOCKER_IMAGE: ${{ steps.image_tag.outputs.image_tag }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          if [ -z "${{ secrets.E2E_GITHUB_TOKEN }}" ]; then
            echo "‚ùå ERROR: E2E_GITHUB_TOKEN secret is not set"
            echo "Please create a Personal Access Token and add it as a repository secret"
            echo "Instructions: https://github.com/settings/tokens/new"
            exit 1
          fi
          
          if [ -z "${{ secrets.KAITO_PR_REVIEWER_WORKSPACE_URL }}" ]; then
            echo "‚ùå ERROR: KAITO_PR_REVIEWER_WORKSPACE_URL secret is not set"
            echo "Please set the Kaito load balancer endpoint URL in repository secrets"
            exit 1
          fi
          
          echo "üîß Verifying self-hosted runner access to Kaito backend..."
          curl -f -s "${{ secrets.KAITO_PR_REVIEWER_WORKSPACE_URL }}/models" > /dev/null || {
            echo "‚ùå ERROR: Cannot access Kaito backend from self-hosted runner"
            echo "Kaito URL: ${{ secrets.KAITO_PR_REVIEWER_WORKSPACE_URL }}"
            exit 1
          }
          echo "‚úÖ Kaito backend is accessible from self-hosted runner"
          
          echo "üß™ Running E2E test with built Docker image..."
          echo "Image: ${{ steps.image_tag.outputs.image_tag }}"
          echo "Backend: Kaito (${{ secrets.KAITO_PR_REVIEWER_WORKSPACE_URL }})"
          echo "Model: hosted_vllm/qwen2.5-coder-32b-instruct"
          echo ""
          echo "This test will:"
          echo "  1. Create a test PR in this repository"
          echo "  2. Run the built PR-Agent image on that PR using Kaito backend"
          echo "  3. Validate that describe/review/improve tools work"
          echo "  4. Clean up the test PR"
          echo ""
          
          # Run the E2E test directly on the runner (not inside container)
          pytest -v tests/e2e_tests/test_pr_agent_e2e.py

      - name: Test Results Summary
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ E2E Test PASSED - Your PR-Agent changes work correctly!"
          else
            echo "‚ùå E2E Test FAILED - Check the logs above for details"
            exit 1
          fi
